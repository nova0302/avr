* atmel studio 7 install
  - [[https://www.microchip.com/mplab/avr-support/atmel-studio-7][atmel studio 7]]
    
* USB ISP
  - tools -> add target
#+CAPTION: USB ISP SETTING
#+NAME:   fig:SED-HR4049
[[./images/addTarget.jpg]]

* AVR
  
** fuse bit Settgin
   - tools -> device programming -> 
   - [[https://m.blog.naver.com/PostView.nhn?blogId=nkkh159&logNo=220801733605&proxyReferer=https://www.google.com/][fuse bit setting link]]
#+CAPTION: Fuse Bit Setting for 8 F_CPU internal oscillator
#+NAME:   fig:SED-HR4049
[[./images/fuseSetting.jpg]]
     
** avr studio keyboard shortcut
   
*** Ctl + Alt + F5 -> compile && download
    
*** F7 -> project build
    
*** auto indentation

**** Ctl-k, Ctl-d -> Format Document

**** Ctl-k, Ctl-f -> Format Selection
     
* Day 1 GPIO
  
** GPIO

#+BEGIN_SRC C
  /*
   * Author : Sanglae Kim
   */ 
  #include <stdio.h> //for printf
  #include <stdint.h> // for uint~~
  #include <assert.h>
  #include <stdbool.h>

  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>

  #define BAUD 9600
  #define MYUBRR F_CPU/16/BAUD-1

  void USART_init(unsigned int ubrr) {
      UBRRH = (unsigned char)(ubrr >> 8);
      UBRRL = (unsigned char)ubrr;
      UCSRB = 1 << RXEN  | 1 << TXEN;
      UCSRC = 1 << URSEL | 1 << USBS | 3 << UCSZ0;
  }

  int USART_transmit( unsigned char data, FILE *stream ) {
      while(!(UCSRA & (1 << UDRE)));
      UDR = data;
      return 0;
  }

  int main(void)
  {
      fdevopen(USART_transmit, NULL);
      DDRB = (1 << DDB0);
      USART_init(MYUBRR);
      uint8_t i=0;
	
      /* Replace with your application code */
      while (1) 
      {
	  if(PINB & (1 << PINB1)){
	      printf("%d: Hello Wrold\r\n", i++);	
	      _delay_ms(1000);
	  }else{
	      _delay_ms(100);
	  }
	  PORTB ^= 1;
      }
  }

#+END_SRC

* Day 2 Time0 with FND
#+CAPTION: USB ISP SETTING
#+NAME:   fig:SED-HR4049
[[./images/timer0.jpg]]
#+BEGIN_SRC C
  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>
  #include <avr/interrupt.h>
  uint8_t num = 0;
  uint8_t bP[10] ={
      0b11111001 		,0b11111001
      ,0b11111001 	,0b11111001
      ,0b11111001		,0b11111001
      ,0b11111001		,0b11111001
      ,0b11111001		,0b11111001
  };

  int main(void)
  {

      // timer0 setting
      TCCR0 |= (1 << WGM01) | (1 << CS02) | (1 << CS00);
      OCR0 = 64;
      TIMSK |= (1 << OCIE0);
      sei();

      // DDRx, PORTx, PINx
      // port b 0번째 비트를 출력으로 설정
      DDRA = (1 << DDA2) | (1 << DDA1);
      PORTA &= ~(1 << DDA1);// 11111101
      DDRC = 0xFF;
      while (1)
      {
	  if (num++ > 99)
	  {
	      num = 0;
	  }
	  _delay_ms(1000);
      }
  }

  ISR(TIMER0_COMP_vect)
  {
      static uint8_t selDigit = 0;

      if(selDigit == 0){
	  selDigit = 1;
	  uint8_t digit=num/10;
	  PORTC = bP[digit];
	  PORTA |= (1 << DDA2);
	  PORTA &= ~(1 << DDA1);// 11111101
      }
      else
      {
	  selDigit = 0;
	  uint8_t digit = num % 10;
	  PORTC = bP[digit];
	  PORTA |= (1 << DDA1);
	  PORTA &= ~(1 << DDA2);// 11111101
      }
  }

#+END_SRC

* Day 3 Timer1 && Button Event 
   
#+CAPTION: USB ISP SETTING
#+NAME:   fig:SED-HR4049
[[./images/timer1.jpg]]

#+BEGIN_SRC C
//https://github.com/monoclecat/avr-millis-function
  #include <stdio.h> //for printf
  #include <stdint.h> // for uint~~
  #include <assert.h>
  #include <stdbool.h>

  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>
  #include <util/atomic.h>
  #include <avr/interrupt.h>

  unsigned long millis ();
  void init_millis(unsigned long f_cpu);

  int main(void)
  {
      unsigned long tNow, tLast=0;
      uint8_t btnLast, btnNow;
      DDRB = (1 << DDB0);
	
      init_millis(8000000UL); //the frequency Atmega16a is running at
      sei();

      while (1)
      {		
	  tNow = millis();
	  if(tNow - tLast > 10){
	      btnNow = (PINB & (1 << PINB1)) ? 1 : 0;
	      if(!btnNow && btnLast)
		  PORTB ^= 1;	
	      btnLast = btnNow;
	      tLast = tNow;	 
	  }
	  /*
	    _delay_ms(100);
	    PORTB ^= 1;
	  ,*/
      }
  }

  volatile unsigned long timer1_millis;
  //NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

  ISR(TIMER1_COMPA_vect)
  {
      timer1_millis++;
  }

  void init_millis(unsigned long f_cpu)
  {
      unsigned long ctc_match_overflow;
	
      ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
	
      // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
      TCCR1B |= (1 << WGM12) | (1 << CS11);
	
      // high byte first, then low byte
      OCR1AH = (ctc_match_overflow >> 8);
      OCR1AL = ctc_match_overflow;
	
      // Enable the compare match interrupt
      TIMSK |= (1 << OCIE1A);
	
      //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
  }

  unsigned long millis ()
  {
      unsigned long millis_return;
	
      // Ensure this cannot be disrupted
      ATOMIC_BLOCK(ATOMIC_FORCEON) {
	  millis_return = timer1_millis;
      }
      return millis_return;
  }

#+END_SRC


** Timer0 Interrupt

#+BEGIN_SRC C

  /*
   ,* timer0Interrupt.c
   ,*
   ,* Created: 2020-08-11 오전 4:31:18
   ,* Author : Sanglae Kim
   ,*/ 


  #include <stdio.h> //for printf
  #include <stdint.h> // for uint~~
  #include <assert.h>
  #include <stdbool.h>

  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>
  #include <util/atomic.h>
  #include <avr/interrupt.h>

  unsigned long millis ();
  void init_millis(unsigned long f_cpu);


  int main(void)
  {
      unsigned long tNow, tLast=0;
      uint8_t btnLast, btnNow;
      DDRB = (1 << DDB0);
	
      init_millis(8000000UL); //the frequency Atmega16a is running at
      sei();

      while (1)
      {		
	  tNow = millis();
	  if(tNow - tLast > 10){
	      btnNow = (PINB & (1 << PINB1)) ? 1 : 0;
	      if(!btnNow && btnLast)
		  PORTB ^= 1;	
	      btnLast = btnNow;
	      tLast = tNow;	 
	  }
	  /*
	    _delay_ms(100);
	    PORTB ^= 1;
	  ,*/
      }
  }

  volatile unsigned long timer1_millis;
  //NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

  ISR(TIMER0_COMP_vect)
  {
      PORTB ^= 1;	
  }

  void init_millis(unsigned long f_cpu)
  {
      unsigned long ctc_match_overflow;
	
      ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
	
      // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
      TCCR0 |= (1 << WGM01) |(1 << CS02) | (1 << CS00); // devide by 1024 -> 8M/1K = 8K
	
      // high byte first, then low byte
      OCR0 = 255;
	
      // Enable the compare match interrupt
      TIMSK |= (1 << OCIE0);
	
      //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
  }

  unsigned long millis ()
  {
      unsigned long millis_return;
	
      // Ensure this cannot be disrupted
      ATOMIC_BLOCK(ATOMIC_FORCEON) {
	  millis_return = timer1_millis;
      }
      return millis_return;
  }



#+END_SRC

* Day 4.1 Rotary Encoder
https://www.youtube.com/watch?v=v4BbSzJ-hz4
* Day 5 ADC 
** ADC Polling

#+BEGIN_SRC c

  //
  //adcPolling.c
  //
  //Created: 2020-08-13 오전 12:17:07
  //Author : Sanglae Kim
  //
  //https://mul-ku.tistory.com/entry/Code-Example-Atmega1632-ADC-%EC%98%88%EC%A0%9C

  #include <stdio.h> //for printf
  #include <stdint.h> // for uint~~
  #include <assert.h>
  #include <stdbool.h>

  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>

  #define BAUD 9600
  #define MYUBRR F_CPU/16/BAUD-1

  void USART_init(unsigned int ubrr) {
      UBRRH = (unsigned char)(ubrr >> 8);
      UBRRL = (unsigned char)ubrr;
      UCSRB = 1 << RXEN  | 1 << TXEN;
      UCSRC = 1 << URSEL | 1 << USBS | 3 << UCSZ0;
  }

  int USART_transmit( unsigned char data, FILE *stream ) {
      while(!(UCSRA & (1 << UDRE)));
      UDR = data;
      return 0;
  }

  int main(void)
  {
      fdevopen(USART_transmit, NULL);
	
      USART_init(MYUBRR);
      // AREF = AVcc
      ADMUX = (1<<REFS0);
	
      // ADC Enable and prescaler of 128
      // 16000000/128 = 125000
      ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      uint16_t i = 0;
	
      /* Replace with your application code */
      while (1)
      {
	  // start single conversion
	  // write '1' to ADSC
	  ADCSRA |= (1<<ADSC);
		
	  // wait for conversion to complete
	  // ADSC becomes '0' again
	  // till then, run loop continuously
	  while(ADCSRA & (1<<ADSC));
		
	  uint16_t adcValue = ADCL;
	  adcValue = adcValue << 8;
	  adcValue += ADCH;
		
	  printf("%d: ADC Values : %d\r\n", i++, adcValue);
	  _delay_ms(1000);
      }
  }


  
  #+END_SRC

** ADC auto trigger with timer0 
   
#+BEGIN_SRC c

  //https://www.electronicsplanet.ch/mikrocontroller/source-code/ATMega16/ATmega16-ADC-Autotrigger-Timer0.htm
  #include <stdio.h> //for printf
  #include <stdint.h> // for uint~~
  #include <assert.h>
  #include <stdbool.h>

  #define F_CPU 8000000UL
  #include <avr/io.h>
  #include <util/delay.h>
  #include <avr/interrupt.h>

  #define BAUD 9600
  #define MYUBRR F_CPU/16/BAUD-1

  void USART_init(unsigned int ubrr) {
      UBRRH = (unsigned char)(ubrr >> 8);
      UBRRL = (unsigned char)ubrr;
      UCSRB = 1 << RXEN  | 1 << TXEN;
      UCSRC = 1 << URSEL | 1 << USBS | 3 << UCSZ0;
  }

  int USART_transmit( unsigned char data, FILE *stream ) {
      while(!(UCSRA & (1 << UDRE)));
      UDR = data;
      return 0;
  }

  int main(void)
  {
      fdevopen(USART_transmit, NULL);
      USART_init(MYUBRR);

      DDRB =  (1 << DDB3) |(1 << DDB2);                     // Setup PB2 and PB3 as output
	
      TCCR0 |= (1<<CS02)|(1<<CS00)|    // Start timer0 with prescaler 1024
	  (1<<WGM01)|(1<<COM00);  // CTC mode, toggle OC0 on compare match
	
      OCR0 = 255;                      // Set the capturevalue 8000000/1024/255 = 30Hz, PB3
	
      SFIOR |= (1<<ADTS0)|(1<<ADTS1);  // Set Timer 0 Compare as ADC trigger
	
      ADMUX |= (1<<REFS0);             // Set reference to AVcc

      ADCSRA |= (1<<ADEN)|(1<<ADATE)|  // Enable ADC, Enable auto Triggering
	  (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)|(1<<ADIE);  // Set prescaler to 16
      // Fadc=Fcpu/prescaler= 1000000/16=62.5kHz
      // Fadc should be between 50kHz and 200kHz

      sei();                           // Set the I-bit in SREG

      for(;;);                         // Endless loop;
      // main() will never be left

      return 0;                        // This line will never be executed
  }

  // Interrupt subroutine for ADC conversion complete interrupt
  ISR(ADC_vect)
  {
      static uint8_t n=0;
      uint16_t adcValue = ADCH;
      adcValue = adcValue << 8;
      adcValue += ADCL;
      if(ADC >= 512)                // Compare the conversionresult with 512
	  PORTB |= (1 << PORTB2);            // If larger, set PB3
      else
	  PORTB &= ~(1 << PORTB2);           // If smaller, reset PB3
      if(++n % 20 == 0)
	  printf("ADC Value: %d\r\n", adcValue);
      TIFR |= (1<<OCF0);            // Clear the Timer 0 interruptflag
  }


#+END_SRC
* Register Summary
#+CAPTION: register summary
#+NAME:   fig:SED-HR4049
[[./images/regSummary.jpg]]
